[
  {
    "display_name": "Javascript Enrichment",
    "form_info": "JS Enrichment element, allows writing some JS to run in the pipeline",
    "expandable": false,
    "key": "enrichment_meta",
    "categories": [
      "Javascript"
    ],
    "filters": [
      "Bucket/**"
    ],
    "schema": [
      {
        "key": "name",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Unique Job Name",
          "pattern": "[a-zA-Z0-9_]+",
          "placeholder": "A Short Name For This Element (Alphanumeric/_ only, no spaces - used for dependencies etc)",
          "required": true
        }
      },
      {
        "key": "module_name_or_id",
        "type": "horizontalInput",
        "defaultValue": "/app/aleph2/library/enrichment_utils.jar",
        "templateOptions": {
          "label": "Module Name or ID",
          "placeholder": "Library needed for this batch enrichment engine",
          "required": true
        }
      },
      {
        "key": "entry_point",
        "type": "horizontalInput",
        "defaultValue": "com.ikanow.aleph2.enrichment.utils.services.JsScriptEngineService",
        "templateOptions": {
          "label": "Entry Point",
          "placeholder": "Class path to enrichment entry point.",
          "required": true
        }
      },
      {
        "key": "library_names_or_ids",
        "type": "multiInput",
        "defaultValue": [
          "/app/aleph2/library/enrichment_utils.jar"
        ],
        "templateOptions": {
          "label": "Additional javascript libraries",
          "inputOptions": {
            "type": "input"
          },
          "placeholder": "Path for any additional javascript libraries required",
          "required": false
        }
      },
      {
        "key": "js_script",
        "type": "code_input",
        "defaultValue": "function handle_batch_java(json_stream, len, grouping_key) {\n\tvar it = json_stream.iterator();\n\twhile (it.hasNext()) {\n\t\tvar json = it.next();\n\t\t_a2.emit(json);\n\t}\n}",
        "templateOptions": {
          "label": "JS code to run",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      }
    ],
    "building_function": {
      "$fn": "function (errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {             \n        var config_obj = {};\n        config_obj.entry_point = template.element.form_model.entry_point;\n        config_obj.module_name_or_id = template.element.form_model.module_name_or_id;\n        config_obj.name = template.element.form_model.name;\n        config_obj.enabled = true;\n        config_obj.library_names_or_ids = template.element.form_model.library_names_or_ids;\n        var script_obj = {};\n        script_obj.script = template.element.form_model.js_script;\n        config_obj.config = script_obj;\n         a2_inject_enrichment(curr_obj, config_obj); \n      }"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Bucket Input",
    "form_info": "Input element for adding bucket data. Leave resource name blank to target this bucket's batch or streaming input queue.",
    "expandable": false,
    "key": "analytic_input",
    "categories": [
      "Input"
    ],
    "filters": [
      "Bucket/**"
    ],
    "schema": [
      {
        "key": "data_service",
        "type": "horizontalInput",
        "defaultValue": "search_index_service",
        "templateOptions": {
          "label": "Data Service",
          "placeholder": "Name of the data service you want to read from (search_index_service, storage_service, document_service.V1DocumentService)",
          "required": true
        }
      },
      {
        "key": "resource_name_or_id",
        "type": "horizontalInput",
        "defaultValue": "/some/other/bucket",
        "templateOptions": {
          "label": "Resource Name",
          "placeholder": "Path or ID of the data service you want e.g. bucket full name",
          "required": false
        }
      },
      {
        "key": "time_max",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Time Max",
          "placeholder": "Oldest selected data (eg '4 days')",
          "required": false
        }
      },
      {
        "key": "time_min",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Time Min",
          "placeholder": "Newest selected data (eg '2 days')",
          "required": false
        }
      },
      {
        "template": "<hr/>"
      },
      {
        "templateOptions": {
          "label": "Filter Input?",
          "placeholder": ""
        },
        "type": "checkbox",
        "key": "filter_input"
      },
      {
        "hideExpression": "!model.filter_input",
        "fieldGroup": [
          {
            "key": "filter",
            "type": "code_input",
            "templateOptions": {
              "codemirror": {
                "lineNumbers": true,
                "smartIndent": true,
                "mode": "javascript"
              },
              "label": "Input Filter"
            }
          }
        ]
      }
    ],
    "building_function": {
      "$fn": "function (errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {               \n        var obj = {};\n        obj.data_service = template.element.form_model.data_service;\n        obj.enabled = true;\n        obj.resource_name_or_id = (template.element.form_model.resource_name_or_id || \"\");\n        var config_obj = {};\n        config_obj.time_max = template.element.form_model.time_max;\n        config_obj.time_min = template.element.form_model.time_min;\n        obj.config = config_obj;\n  \t\tif (template.element.form_model.filter_input) {\n          obj.filter = JSON.parse(template.element.form_model.filter);\n        }\n        curr_obj.inputs.push(obj);\n      }"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    },
    "default_model": {
      "filter": "{\n   \"technology_override\": {}\n}"
    }
  },
  {
    "display_name": "Basic Output",
    "form_info": "Input element for adding bucket data",
    "expandable": false,
    "key": "analytic_output",
    "categories": [
      "Output"
    ],
    "filters": [
      "Bucket/**"
    ],
    "schema": [
      {
        "key": "is_transient",
        "type": "horizontalCheckbox",
        "defaultValue": "false",
        "templateOptions": {
          "label": "Is Transient?",
          "required": false
        }
      },
      {
        "key": "preserve_existing_data",
        "type": "horizontalCheckbox",
        "defaultValue": "false",
        "templateOptions": {
          "label": "Preserve existing data?",
          "required": false
        }
      }
    ],
    "building_function": {
      "$fn": "function (errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {               \n        var obj = {};\n        obj.is_transient = template.element.form_model.is_transient || false;\n        obj.preserve_existing_data = template.element.form_model.preserve_existing_data || false;        \n        curr_obj.output = obj;\n      }"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  }
]