{
  "root": true,
  "label": "Template",
  "children": [
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Spark Script Engine",
        "summary": "Spark job that lets the user enter execute a scala script in the Spark context",
        "row": 0,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "child_filters": "analytic_input,analytic_output,enrichment_meta,batch_enrichment_meta,batch_technology_override",
          "key": "analytic_job",
          "sub_keys": "",
          "categories": "Spark Processing",
          "filters": "Bucket/**"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "Some sensible defaults",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n    \"analytic_type\": \"batch\",\n    \"lock_to_nodes\": true,\n    \"analytic_technology_name_or_id\": \"/app/aleph2/library/spark_technology.jar\",\n    \"job_config\": \"{\\n}\",\n    \"entry_point\": \"com.ikanow.aleph2.analytics.spark.assets.SparkScalaInterpreterTopology\",\n    \"module_name_or_id\": \"/app/aleph2/library/spark_script_engine.jar\",\n    \"cluster_mode\": \"yarn-cluster\",\n    \"include_job_config_in_spark_config\": true,\n\t\"script\": \"// Like spark-shell, with the following built in args:\\n// _a2.aleph2_context (IAnalyticsContext) - the Aleph2 context interface\\n// _a2.inputs (Multimap<String, JavaPairRDD<Object, Tuple2<Long, IBatchRecord>>>) - a list of input (java) RDDs\\n// _a2.spark_context (SparkConf)\\n// _a2.job_config (SparkTopologyConfigBean) - the full configuration object\\n\\n//eg:\\nval logger = _a2.aleph2_context.getLogger(_a2.aleph2_context.getBucket());\\nval count = _a2.inputs.entries().iterator().next().getValue().count()); //(count the number of objects in the first input)\\nlogger.log(Level.INFO, true, { () => \\\"Count = \\\" + count }.asJava, { () -> \\\"SparkScriptEngine\\\" }.asJava);\\n\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Multi Text Input",
          "element": {
            "enabled": true,
            "short_name": "Misc files",
            "summary": "Provide the scala script with miscellaneous files from the shared library",
            "row": 2,
            "col": 3,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "key": "uploaded_files"
            },
            "template": {
              "display_name": "Multi Text Input",
              "form_info": "A variable list of text fields",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "_summary",
                  "type": "horizontalTextArea",
                  "templateOptions": {
                    "label": "Placeholder",
                    "placeholder": "The placeholder text displayed when the input is empty",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "pattern",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Pattern",
                    "placeholder": "Optional validation regular expression",
                    "required": false
                  }
                }
              ],
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { type: 'multiInput', templateOptions: { inputOptions: { type: 'input', templateOptions: {} } } };\n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name; \n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.inputOptions.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.inputOptions.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Horizontal Line",
          "element": {
            "enabled": true,
            "short_name": "Horizontal Line",
            "summary": "",
            "row": 3,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "html": "<hr/>"
            },
            "template": {
              "display_name": "Horizontal Line",
              "form_info": "Insert horizontal line",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Layout"
              ],
              "schema": [],
              "default_model": {
                "html": "<hr/>"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.schema.push({template: template.element.form_model.html}); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Standalone Checkbox",
          "element": {
            "enabled": true,
            "short_name": "Show advanced options",
            "summary": "",
            "row": 3,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "checkbox",
              "key": "advanced_options"
            },
            "template": {
              "display_name": "Standalone Checkbox",
              "form_info": "Non-compact checkbox input element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Selection"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                }
              ],
              "default_model": {
                "type": "checkbox",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Horizontal Line",
          "element": {
            "enabled": true,
            "short_name": "Horizontal Line",
            "summary": "",
            "row": 4,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "html": "<hr/>"
            },
            "template": {
              "display_name": "Horizontal Line",
              "form_info": "Insert horizontal line",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Layout"
              ],
              "schema": [],
              "default_model": {
                "html": "<hr/>"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.schema.push({template: template.element.form_model.html}); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Standalone Checkbox",
          "element": {
            "enabled": true,
            "short_name": "Additional library options",
            "summary": "Show more file/lib related options",
            "row": 4,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "checkbox",
              "key": "more_files"
            },
            "template": {
              "display_name": "Standalone Checkbox",
              "form_info": "Non-compact checkbox input element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Selection"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                }
              ],
              "default_model": {
                "type": "checkbox",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Show/Hide Section",
          "element": {
            "enabled": true,
            "short_name": "Advanced show/hide",
            "summary": "Advanced options",
            "row": 3,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": true,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "hideExpression": "!model.advanced_options"
            },
            "template": {
              "display_name": "Show/Hide Section",
              "form_info": "The children of this section are hidden based on a JS/AngularJS expression - other variables in the format are available in the model object (eg key thisCheckbox is accessed via \"model.thisCheckbox\")",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": true,
              "key": "template_builder",
              "categories": [
                "Layout"
              ],
              "schema": [
                {
                  "templateOptions": {
                    "required": true,
                    "label": "Expression returning true to hide the section",
                    "placeholder": "Enter a JS expression into here to determine when the elements in this section should be visible"
                  },
                  "key": "hideExpression",
                  "type": "input"
                }
              ],
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { hideExpression: template.element.form_model.hideExpression, schema: [] };\n  curr_obj.schema.push(obj);\n  return obj;\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var me = curr_obj.schema[curr_obj.schema.length - 1];\n  me.fieldGroup = me.schema;\n  me.schema = undefined;\n}"
              },
              "default_model": {
                "hideExpression": "false"
              }
            }
          },
          "children": [
            {
              "root": false,
              "label": "Code Editor",
              "element": {
                "enabled": true,
                "short_name": "Misc JSON Config",
                "summary": "Arbitrary JSON block that is passed into the script as \"spark.aleph2_job_config\" if the checkbox is selected, otherwise is available via the bucket/job",
                "row": 0,
                "col": 1,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "type": "code_input",
                  "templateOptions": {
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    },
                    "label": "Misc JSON Config"
                  },
                  "key": "job_config",
                  "mode": "javascript"
                },
                "template": {
                  "display_name": "Code Editor",
                  "form_info": "Write code in various languages (or JSON/XML/HTML)",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "simple_input",
                  "categories": [
                    "Text"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    },
                    {
                      "key": "required",
                      "type": "horizontalCheckbox",
                      "templateOptions": {
                        "label": "Is this element required?"
                      }
                    },
                    {
                      "templateOptions": {
                        "required": true,
                        "label": "Language",
                        "options": [
                          {
                            "value": "clike",
                            "name": "Scala"
                          },
                          {
                            "value": "javascript",
                            "name": "Javascript/JSON"
                          },
                          {
                            "value": "r",
                            "name": "R"
                          },
                          {
                            "value": "python",
                            "name": "Python"
                          },
                          {
                            "value": "xml",
                            "name": "XML"
                          },
                          {
                            "value": "lua",
                            "name": "Lua"
                          },
                          {
                            "value": "yaml",
                            "name": "YAML"
                          },
                          {
                            "value": "properties",
                            "name": "Properties"
                          },
                          {
                            "value": "htmlembedded",
                            "name": "HTML (embedded)"
                          },
                          {
                            "value": "htmlmixed",
                            "name": "HTML (mixed)"
                          }
                        ]
                      },
                      "type": "horizontalSelect",
                      "key": "mode"
                    }
                  ],
                  "default_model": {
                    "type": "code_input",
                    "templateOptions": {
                      "codemirror": {
                        "lineNumbers": true,
                        "smartIndent": true
                      }
                    }
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { \n    key: template.element.form_model.key,\n    type: template.element.form_model.type,\n    templateOptions: template.element.form_model.templateOptions \n  };\n  obj.templateOptions.codemirror.mode = template.element.form_model.mode;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.required = template.element.form_model.required;\n  curr_obj.schema.push(obj);\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            },
            {
              "root": false,
              "label": "Standalone Checkbox",
              "element": {
                "enabled": true,
                "short_name": "Insert Job Config into the Spark Config options",
                "summary": "If true then can access this JSON as a string in the pure Spark Conf object",
                "row": 0,
                "col": 2,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "type": "checkbox",
                  "key": "include_job_config_in_spark_config"
                },
                "template": {
                  "display_name": "Standalone Checkbox",
                  "form_info": "Non-compact checkbox input element",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "simple_input",
                  "categories": [
                    "Selection"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    }
                  ],
                  "default_model": {
                    "type": "checkbox",
                    "key": "TODO_KEY"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            },
            {
              "root": false,
              "label": "Horizontal Input",
              "element": {
                "enabled": true,
                "short_name": "Analytic Technology Override",
                "summary": "To use a non-standard JAR for this job (eg for testing)",
                "row": 0,
                "col": 4,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "type": "horizontalInput",
                  "key": "analytic_technology_name_or_id"
                },
                "template": {
                  "display_name": "Horizontal Input",
                  "form_info": "Compact text input element",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "simple_input",
                  "categories": [
                    "Text"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "_summary",
                      "type": "horizontalTextArea",
                      "templateOptions": {
                        "label": "Placeholder",
                        "placeholder": "The placeholder text displayed when the input is empty",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    },
                    {
                      "key": "required",
                      "type": "horizontalCheckbox",
                      "templateOptions": {
                        "label": "Is this element required?"
                      }
                    },
                    {
                      "key": "pattern",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Pattern",
                        "placeholder": "Optional validation regular expression",
                        "required": false
                      }
                    }
                  ],
                  "default_model": {
                    "type": "horizontalInput",
                    "key": "TODO_KEY"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            },
            {
              "root": false,
              "label": "Horizontal Input",
              "element": {
                "enabled": true,
                "short_name": "Node List Rules",
                "summary": "A list of (short) hostnames on which this job can run",
                "row": 1,
                "col": 2,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "type": "horizontalInput",
                  "key": "node_list_rules"
                },
                "template": {
                  "display_name": "Horizontal Input",
                  "form_info": "Compact text input element",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "simple_input",
                  "categories": [
                    "Text"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "_summary",
                      "type": "horizontalTextArea",
                      "templateOptions": {
                        "label": "Placeholder",
                        "placeholder": "The placeholder text displayed when the input is empty",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    },
                    {
                      "key": "required",
                      "type": "horizontalCheckbox",
                      "templateOptions": {
                        "label": "Is this element required?"
                      }
                    },
                    {
                      "key": "pattern",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Pattern",
                        "placeholder": "Optional validation regular expression",
                        "required": false
                      }
                    }
                  ],
                  "default_model": {
                    "type": "horizontalInput",
                    "key": "TODO_KEY"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            },
            {
              "root": false,
              "label": "Repeating Section",
              "element": {
                "enabled": true,
                "short_name": "Spark Parameters",
                "summary": "",
                "row": 2,
                "col": 2,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": true,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "key": "spark_config",
                  "type": "repeatSection",
                  "btnText": "Add"
                },
                "template": {
                  "display_name": "Repeating Section",
                  "form_info": "Create a sub-form under here",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": true,
                  "key": "template_builder",
                  "categories": [
                    "Layout"
                  ],
                  "schema": [
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "placeholder": "Enter a key for this repeater",
                        "required": true
                      }
                    },
                    {
                      "key": "btnText",
                      "type": "horizontalInput",
                      "defaultValue": "Add",
                      "templateOptions": {
                        "label": "Add Button Name",
                        "placeholder": "Enter the name for this button",
                        "required": true
                      }
                    }
                  ],
                  "default_model": {
                    "key": "ADD_KEY_HERE",
                    "type": "repeatSection",
                    "btnText": "Add"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n  var m = template.element.form_model;\n  var obj = { templateOptions: { schema: [] } }; \n  curr_obj.schema.push(obj); \n  obj.type = m.type; \n  obj.key = m.key; \n  obj.templateOptions.btnText = m.btnText;\n  return obj.templateOptions;   \n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar me = curr_obj.schema[curr_obj.schema.length-1]; \n  me.templateOptions.fields = me.templateOptions.schema;\n  me.templateOptions.schema = undefined;  \n}"
                  }
                }
              },
              "children": [
                {
                  "root": false,
                  "label": "Row/Column Layout",
                  "element": {
                    "enabled": true,
                    "short_name": "Row/Column Layout",
                    "summary": "",
                    "row": 0,
                    "col": 0,
                    "sizeX": 1,
                    "sizeY": 1,
                    "expandable": true,
                    "configurable": true,
                    "deletable": true,
                    "form_model": {
                      "class": "row",
                      "columns": [
                        "6",
                        "6"
                      ]
                    },
                    "template": {
                      "display_name": "Row/Column Layout",
                      "form_info": "Add a row and define the layout of columns",
                      "filters": [
                        "Template/template_builder",
                        "Template/template_builder/**"
                      ],
                      "expandable": true,
                      "key": "template_builder",
                      "categories": [
                        "Layout"
                      ],
                      "schema": [
                        {
                          "type": "multiInput",
                          "templateOptions": {
                            "inputOptions": {
                              "type": "select",
                              "templateOptions": {
                                "options": [
                                  {
                                    "name": "0",
                                    "value": "0"
                                  },
                                  {
                                    "name": "1",
                                    "value": "1"
                                  },
                                  {
                                    "name": "2",
                                    "value": "2"
                                  },
                                  {
                                    "name": "3",
                                    "value": "3"
                                  },
                                  {
                                    "name": "4",
                                    "value": "4"
                                  },
                                  {
                                    "name": "5",
                                    "value": "5"
                                  },
                                  {
                                    "name": "6",
                                    "value": "6"
                                  },
                                  {
                                    "name": "7",
                                    "value": "7"
                                  },
                                  {
                                    "name": "8",
                                    "value": "8"
                                  },
                                  {
                                    "name": "9",
                                    "value": "9"
                                  },
                                  {
                                    "name": "10",
                                    "value": "10"
                                  },
                                  {
                                    "name": "11",
                                    "value": "11"
                                  }
                                ]
                              }
                            },
                            "label": "Column widths (must add up to <= 12)"
                          },
                          "key": "columns"
                        }
                      ],
                      "default_model": {
                        "class": "row"
                      },
                      "building_function": {
                        "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n var m = template.element.form_model;\n var obj = { schema: [] }; \n curr_obj.schema.push(obj); \n obj.className = m.class; \n return obj; \n}"
                      },
                      "post_building_function": {
                        "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var me = curr_obj.schema[curr_obj.schema.length-1]; \n  me.fieldGroup = me.schema;\n  me.schema = undefined;\n  if (template.element.form_model.columns) {\n    for (i in template.element.form_model.columns) {\n      var col = template.element.form_model.columns[i];\n      me.fieldGroup[i].className = 'col-xs-' + col;\n    }\n  }\n}"
                      }
                    }
                  },
                  "children": [
                    {
                      "root": false,
                      "label": "2-Line Input",
                      "element": {
                        "enabled": true,
                        "short_name": "Parameter Key",
                        "summary": "Must start with \"spark.\" eg \"spark.config.param\"",
                        "row": 0,
                        "col": 0,
                        "sizeX": 1,
                        "sizeY": 1,
                        "expandable": false,
                        "configurable": true,
                        "deletable": true,
                        "form_model": {
                          "type": "input",
                          "key": "key",
                          "required": true
                        },
                        "template": {
                          "display_name": "2-Line Input",
                          "form_info": "Text input element with label on the line above",
                          "filters": [
                            "Template/template_builder",
                            "Template/template_builder/**"
                          ],
                          "expandable": false,
                          "key": "simple_input",
                          "categories": [
                            "Text"
                          ],
                          "schema": [
                            {
                              "key": "_short_name",
                              "type": "horizontalInput",
                              "templateOptions": {
                                "label": "Label",
                                "placeholder": "The label displayed next to the input",
                                "required": true
                              }
                            },
                            {
                              "key": "_summary",
                              "type": "horizontalTextArea",
                              "templateOptions": {
                                "label": "Placeholder",
                                "placeholder": "The placeholder text displayed when the input is empty",
                                "required": true
                              }
                            },
                            {
                              "key": "key",
                              "type": "horizontalInput",
                              "templateOptions": {
                                "label": "Key",
                                "pattern": "[a-zA-Z0-9_]+",
                                "placeholder": "The key for this input",
                                "required": true
                              }
                            },
                            {
                              "key": "required",
                              "type": "horizontalCheckbox",
                              "templateOptions": {
                                "label": "Is this element required?"
                              }
                            },
                            {
                              "key": "pattern",
                              "type": "horizontalInput",
                              "templateOptions": {
                                "label": "Pattern",
                                "placeholder": "Optional validation regular expression",
                                "required": false
                              }
                            }
                          ],
                          "default_model": {
                            "type": "input",
                            "key": "TODO_KEY"
                          },
                          "building_function": {
                            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                          },
                          "post_building_function": {
                            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                          }
                        }
                      },
                      "children": []
                    },
                    {
                      "root": false,
                      "label": "2-Line Input",
                      "element": {
                        "enabled": true,
                        "short_name": "Parameter Value",
                        "summary": "The value",
                        "row": 0,
                        "col": 1,
                        "sizeX": 1,
                        "sizeY": 1,
                        "expandable": false,
                        "configurable": true,
                        "deletable": true,
                        "form_model": {
                          "type": "input",
                          "key": "value",
                          "required": true
                        },
                        "template": {
                          "display_name": "2-Line Input",
                          "form_info": "Text input element with label on the line above",
                          "filters": [
                            "Template/template_builder",
                            "Template/template_builder/**"
                          ],
                          "expandable": false,
                          "key": "simple_input",
                          "categories": [
                            "Text"
                          ],
                          "schema": [
                            {
                              "key": "_short_name",
                              "type": "horizontalInput",
                              "templateOptions": {
                                "label": "Label",
                                "placeholder": "The label displayed next to the input",
                                "required": true
                              }
                            },
                            {
                              "key": "_summary",
                              "type": "horizontalTextArea",
                              "templateOptions": {
                                "label": "Placeholder",
                                "placeholder": "The placeholder text displayed when the input is empty",
                                "required": true
                              }
                            },
                            {
                              "key": "key",
                              "type": "horizontalInput",
                              "templateOptions": {
                                "label": "Key",
                                "pattern": "[a-zA-Z0-9_]+",
                                "placeholder": "The key for this input",
                                "required": true
                              }
                            },
                            {
                              "key": "required",
                              "type": "horizontalCheckbox",
                              "templateOptions": {
                                "label": "Is this element required?"
                              }
                            },
                            {
                              "key": "pattern",
                              "type": "horizontalInput",
                              "templateOptions": {
                                "label": "Pattern",
                                "placeholder": "Optional validation regular expression",
                                "required": false
                              }
                            }
                          ],
                          "default_model": {
                            "type": "input",
                            "key": "TODO_KEY"
                          },
                          "building_function": {
                            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                          },
                          "post_building_function": {
                            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                          }
                        }
                      },
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "root": false,
              "label": "Section header",
              "element": {
                "enabled": true,
                "short_name": "Spark Parameters",
                "summary": "",
                "row": 2,
                "col": 1,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {},
                "template": {
                  "display_name": "Section header",
                  "form_info": "Provides a section header",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "template_element",
                  "categories": [
                    "Layout"
                  ],
                  "schema": [
                    {
                      "templateOptions": {
                        "required": true,
                        "label": "Horizontal Input",
                        "placeholder": "The section header title (in HTML)"
                      },
                      "key": "_short_name",
                      "type": "horizontalInput"
                    }
                  ],
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  obj = { \n    \"className\": \"section-label\",\n    \"template\": \"<hr /><div><strong>\" + template.element.short_name + \"</strong></div>\"    \n        };\n  curr_obj.schema.push(obj);\n  \n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            },
            {
              "root": false,
              "label": "Section header",
              "element": {
                "enabled": true,
                "short_name": "Spark Executor Command Line Options",
                "summary": "",
                "row": 3,
                "col": 1,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {},
                "template": {
                  "display_name": "Section header",
                  "form_info": "Provides a section header",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "template_element",
                  "categories": [
                    "Layout"
                  ],
                  "schema": [
                    {
                      "templateOptions": {
                        "required": true,
                        "label": "Horizontal Input",
                        "placeholder": "The section header title (in HTML)"
                      },
                      "key": "_short_name",
                      "type": "horizontalInput"
                    }
                  ],
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  obj = { \n    \"className\": \"section-label\",\n    \"template\": \"<hr /><div><strong>\" + template.element.short_name + \"</strong></div>\"    \n        };\n  curr_obj.schema.push(obj);\n  \n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            },
            {
              "root": false,
              "label": "Repeating Section",
              "element": {
                "enabled": true,
                "short_name": "System Parameters",
                "summary": "",
                "row": 3,
                "col": 2,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": true,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "key": "system_config",
                  "type": "repeatSection",
                  "btnText": "Add"
                },
                "template": {
                  "display_name": "Repeating Section",
                  "form_info": "Create a sub-form under here",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": true,
                  "key": "template_builder",
                  "categories": [
                    "Layout"
                  ],
                  "schema": [
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "placeholder": "Enter a key for this repeater",
                        "required": true
                      }
                    },
                    {
                      "key": "btnText",
                      "type": "horizontalInput",
                      "defaultValue": "Add",
                      "templateOptions": {
                        "label": "Add Button Name",
                        "placeholder": "Enter the name for this button",
                        "required": true
                      }
                    }
                  ],
                  "default_model": {
                    "key": "ADD_KEY_HERE",
                    "type": "repeatSection",
                    "btnText": "Add"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n  var m = template.element.form_model;\n  var obj = { templateOptions: { schema: [] } }; \n  curr_obj.schema.push(obj); \n  obj.type = m.type; \n  obj.key = m.key; \n  obj.templateOptions.btnText = m.btnText;\n  return obj.templateOptions;   \n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar me = curr_obj.schema[curr_obj.schema.length-1]; \n  me.templateOptions.fields = me.templateOptions.schema;\n  me.templateOptions.schema = undefined;  \n}"
                  }
                }
              },
              "children": [
                {
                  "root": false,
                  "label": "Row/Column Layout",
                  "element": {
                    "enabled": true,
                    "short_name": "Row/Column Layout",
                    "summary": "",
                    "row": 0,
                    "col": 0,
                    "sizeX": 1,
                    "sizeY": 1,
                    "expandable": true,
                    "configurable": true,
                    "deletable": true,
                    "form_model": {
                      "class": "row",
                      "columns": [
                        "6",
                        "6"
                      ]
                    },
                    "template": {
                      "display_name": "Row/Column Layout",
                      "form_info": "Add a row and define the layout of columns",
                      "filters": [
                        "Template/template_builder",
                        "Template/template_builder/**"
                      ],
                      "expandable": true,
                      "key": "template_builder",
                      "categories": [
                        "Layout"
                      ],
                      "schema": [
                        {
                          "type": "multiInput",
                          "templateOptions": {
                            "inputOptions": {
                              "type": "select",
                              "templateOptions": {
                                "options": [
                                  {
                                    "name": "0",
                                    "value": "0"
                                  },
                                  {
                                    "name": "1",
                                    "value": "1"
                                  },
                                  {
                                    "name": "2",
                                    "value": "2"
                                  },
                                  {
                                    "name": "3",
                                    "value": "3"
                                  },
                                  {
                                    "name": "4",
                                    "value": "4"
                                  },
                                  {
                                    "name": "5",
                                    "value": "5"
                                  },
                                  {
                                    "name": "6",
                                    "value": "6"
                                  },
                                  {
                                    "name": "7",
                                    "value": "7"
                                  },
                                  {
                                    "name": "8",
                                    "value": "8"
                                  },
                                  {
                                    "name": "9",
                                    "value": "9"
                                  },
                                  {
                                    "name": "10",
                                    "value": "10"
                                  },
                                  {
                                    "name": "11",
                                    "value": "11"
                                  }
                                ]
                              }
                            },
                            "label": "Column widths (must add up to <= 12)"
                          },
                          "key": "columns"
                        }
                      ],
                      "default_model": {
                        "class": "row"
                      },
                      "building_function": {
                        "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n var m = template.element.form_model;\n var obj = { schema: [] }; \n curr_obj.schema.push(obj); \n obj.className = m.class; \n return obj; \n}"
                      },
                      "post_building_function": {
                        "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var me = curr_obj.schema[curr_obj.schema.length-1]; \n  me.fieldGroup = me.schema;\n  me.schema = undefined;\n  if (template.element.form_model.columns) {\n    for (i in template.element.form_model.columns) {\n      var col = template.element.form_model.columns[i];\n      me.fieldGroup[i].className = 'col-xs-' + col;\n    }\n  }\n}"
                      }
                    }
                  },
                  "children": [
                    {
                      "root": false,
                      "label": "2-Line Input",
                      "element": {
                        "enabled": true,
                        "short_name": "Command line switch",
                        "summary": "eg --conf",
                        "row": 0,
                        "col": 0,
                        "sizeX": 1,
                        "sizeY": 1,
                        "expandable": false,
                        "configurable": true,
                        "deletable": true,
                        "form_model": {
                          "type": "input",
                          "key": "key",
                          "required": true
                        },
                        "template": {
                          "display_name": "2-Line Input",
                          "form_info": "Text input element with label on the line above",
                          "filters": [
                            "Template/template_builder",
                            "Template/template_builder/**"
                          ],
                          "expandable": false,
                          "key": "simple_input",
                          "categories": [
                            "Text"
                          ],
                          "schema": [
                            {
                              "key": "_short_name",
                              "type": "horizontalInput",
                              "templateOptions": {
                                "label": "Label",
                                "placeholder": "The label displayed next to the input",
                                "required": true
                              }
                            },
                            {
                              "key": "_summary",
                              "type": "horizontalTextArea",
                              "templateOptions": {
                                "label": "Placeholder",
                                "placeholder": "The placeholder text displayed when the input is empty",
                                "required": true
                              }
                            },
                            {
                              "key": "key",
                              "type": "horizontalInput",
                              "templateOptions": {
                                "label": "Key",
                                "pattern": "[a-zA-Z0-9_]+",
                                "placeholder": "The key for this input",
                                "required": true
                              }
                            },
                            {
                              "key": "required",
                              "type": "horizontalCheckbox",
                              "templateOptions": {
                                "label": "Is this element required?"
                              }
                            },
                            {
                              "key": "pattern",
                              "type": "horizontalInput",
                              "templateOptions": {
                                "label": "Pattern",
                                "placeholder": "Optional validation regular expression",
                                "required": false
                              }
                            }
                          ],
                          "default_model": {
                            "type": "input",
                            "key": "TODO_KEY"
                          },
                          "building_function": {
                            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                          },
                          "post_building_function": {
                            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                          }
                        }
                      },
                      "children": []
                    },
                    {
                      "root": false,
                      "label": "2-Line Input",
                      "element": {
                        "enabled": true,
                        "short_name": "Command line value",
                        "summary": "The value associated with the switch",
                        "row": 0,
                        "col": 1,
                        "sizeX": 1,
                        "sizeY": 1,
                        "expandable": false,
                        "configurable": true,
                        "deletable": true,
                        "form_model": {
                          "type": "input",
                          "key": "value",
                          "required": true
                        },
                        "template": {
                          "display_name": "2-Line Input",
                          "form_info": "Text input element with label on the line above",
                          "filters": [
                            "Template/template_builder",
                            "Template/template_builder/**"
                          ],
                          "expandable": false,
                          "key": "simple_input",
                          "categories": [
                            "Text"
                          ],
                          "schema": [
                            {
                              "key": "_short_name",
                              "type": "horizontalInput",
                              "templateOptions": {
                                "label": "Label",
                                "placeholder": "The label displayed next to the input",
                                "required": true
                              }
                            },
                            {
                              "key": "_summary",
                              "type": "horizontalTextArea",
                              "templateOptions": {
                                "label": "Placeholder",
                                "placeholder": "The placeholder text displayed when the input is empty",
                                "required": true
                              }
                            },
                            {
                              "key": "key",
                              "type": "horizontalInput",
                              "templateOptions": {
                                "label": "Key",
                                "pattern": "[a-zA-Z0-9_]+",
                                "placeholder": "The key for this input",
                                "required": true
                              }
                            },
                            {
                              "key": "required",
                              "type": "horizontalCheckbox",
                              "templateOptions": {
                                "label": "Is this element required?"
                              }
                            },
                            {
                              "key": "pattern",
                              "type": "horizontalInput",
                              "templateOptions": {
                                "label": "Pattern",
                                "placeholder": "Optional validation regular expression",
                                "required": false
                              }
                            }
                          ],
                          "default_model": {
                            "type": "input",
                            "key": "TODO_KEY"
                          },
                          "building_function": {
                            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                          },
                          "post_building_function": {
                            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                          }
                        }
                      },
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "root": false,
              "label": "Horizontal Input",
              "element": {
                "enabled": true,
                "short_name": "Module Name Override",
                "summary": "To use a non-standard JAR for this job (eg for testing)",
                "row": 1,
                "col": 1,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "type": "horizontalInput",
                  "key": "module_name_or_id"
                },
                "template": {
                  "display_name": "Horizontal Input",
                  "form_info": "Compact text input element",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "simple_input",
                  "categories": [
                    "Text"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "_summary",
                      "type": "horizontalTextArea",
                      "templateOptions": {
                        "label": "Placeholder",
                        "placeholder": "The placeholder text displayed when the input is empty",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    },
                    {
                      "key": "required",
                      "type": "horizontalCheckbox",
                      "templateOptions": {
                        "label": "Is this element required?"
                      }
                    },
                    {
                      "key": "pattern",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Pattern",
                        "placeholder": "Optional validation regular expression",
                        "required": false
                      }
                    }
                  ],
                  "default_model": {
                    "type": "horizontalInput",
                    "key": "TODO_KEY"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            },
            {
              "root": false,
              "label": "Horizontal Input",
              "element": {
                "enabled": true,
                "short_name": "Entry Point Override",
                "summary": "To use a non-standard entry point for this job (eg for testing)",
                "row": 1,
                "col": 0,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "type": "horizontalInput",
                  "key": "entry_point"
                },
                "template": {
                  "display_name": "Horizontal Input",
                  "form_info": "Compact text input element",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "simple_input",
                  "categories": [
                    "Text"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "_summary",
                      "type": "horizontalTextArea",
                      "templateOptions": {
                        "label": "Placeholder",
                        "placeholder": "The placeholder text displayed when the input is empty",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    },
                    {
                      "key": "required",
                      "type": "horizontalCheckbox",
                      "templateOptions": {
                        "label": "Is this element required?"
                      }
                    },
                    {
                      "key": "pattern",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Pattern",
                        "placeholder": "Optional validation regular expression",
                        "required": false
                      }
                    }
                  ],
                  "default_model": {
                    "type": "horizontalInput",
                    "key": "TODO_KEY"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "root": false,
          "label": "Show/Hide Section",
          "element": {
            "enabled": true,
            "short_name": "Library show/hide",
            "summary": "Additional library options",
            "row": 4,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": true,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "hideExpression": "!model.more_files"
            },
            "template": {
              "display_name": "Show/Hide Section",
              "form_info": "The children of this section are hidden based on a JS/AngularJS expression - other variables in the format are available in the model object (eg key thisCheckbox is accessed via \"model.thisCheckbox\")",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": true,
              "key": "template_builder",
              "categories": [
                "Layout"
              ],
              "schema": [
                {
                  "templateOptions": {
                    "required": true,
                    "label": "Expression returning true to hide the section",
                    "placeholder": "Enter a JS expression into here to determine when the elements in this section should be visible"
                  },
                  "key": "hideExpression",
                  "type": "input"
                }
              ],
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { hideExpression: template.element.form_model.hideExpression, schema: [] };\n  curr_obj.schema.push(obj);\n  return obj;\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var me = curr_obj.schema[curr_obj.schema.length - 1];\n  me.fieldGroup = me.schema;\n  me.schema = undefined;\n}"
              },
              "default_model": {
                "hideExpression": "false"
              }
            }
          },
          "children": [
            {
              "root": false,
              "label": "Multi Text Input",
              "element": {
                "enabled": true,
                "short_name": "External JAR libraries",
                "summary": "Add other JARs from the local file system",
                "row": 1,
                "col": 0,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "key": "external_jars"
                },
                "template": {
                  "display_name": "Multi Text Input",
                  "form_info": "A variable list of text fields",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "template_element",
                  "categories": [
                    "Text"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "_summary",
                      "type": "horizontalTextArea",
                      "templateOptions": {
                        "label": "Placeholder",
                        "placeholder": "The placeholder text displayed when the input is empty",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    },
                    {
                      "key": "pattern",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Pattern",
                        "placeholder": "Optional validation regular expression",
                        "required": false
                      }
                    }
                  ],
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { type: 'multiInput', templateOptions: { inputOptions: { type: 'input', templateOptions: {} } } };\n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name; \n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.inputOptions.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.inputOptions.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            },
            {
              "root": false,
              "label": "Multi Text Input",
              "element": {
                "enabled": true,
                "short_name": "External misc files",
                "summary": "Provide the scala script with miscellaneous files from the local file system",
                "row": 1,
                "col": 2,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "key": "external_files"
                },
                "template": {
                  "display_name": "Multi Text Input",
                  "form_info": "A variable list of text fields",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "template_element",
                  "categories": [
                    "Text"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "_summary",
                      "type": "horizontalTextArea",
                      "templateOptions": {
                        "label": "Placeholder",
                        "placeholder": "The placeholder text displayed when the input is empty",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    },
                    {
                      "key": "pattern",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Pattern",
                        "placeholder": "Optional validation regular expression",
                        "required": false
                      }
                    }
                  ],
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { type: 'multiInput', templateOptions: { inputOptions: { type: 'input', templateOptions: {} } } };\n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name; \n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.inputOptions.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.inputOptions.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "(complicated!)",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var new_obj = { inputs: [] };\n  new_obj.name = template.element.short_name;\n  new_obj.lock_to_nodes = template.element.form_model.lock_to_nodes;\n  new_obj.analytic_type = template.element.form_model.analytic_type;\n  new_obj.dependencies = a2_optional_array_from_csv(template.element.form_model.dependencies);\n  new_obj.analytic_technology_name_or_id = template.element.form_model.analytic_technology_name_or_id;\n  new_obj.module_name_or_id = template.element.form_model.module_name_or_id;\n  new_obj.library_names_or_ids = [];\n  if (null != template.element.form_model.library_names_or_ids) {\n    for (var i in template.element.form_model.library_names_or_ids) \n      new_obj.library_names_or_ids.push(template.element.form_model.library_names_or_ids[i]);\n  }\n  new_obj.node_list_rules = a2_optional_array_from_csv(template.element.form_model.node_list_rules);\n  new_obj.config = {};\n  \n  var config = new_obj.config;\n    \n  config.cluster_mode = template.element.form_model.cluster_mode;\n  config.enrich_pipeline = [];\n  config.language = template.element.form_model.language;\n  config.entry_point = template.element.form_model.entry_point;\n  config.script = template.element.form_model.script;\n\n  var spark_config = template.element.form_model.spark_config;\n  if (null != spark_config) {\n    config.spark_config = {};\n    for (var kv in spark_config) {\n      var el = spark_config[kv];\n      config.spark_config[el.key] = el.value;\n    }\n  }\n  var system_config = template.element.form_model.system_config;\n  if (null != system_config) {\n    config.system_config = {};\n    for (var kv in system_config) {\n      var el = system_config[kv];\n      config.system_config[el.key] = el.value;\n    }\n  }\n  if (template.element.form_model.job_config) config.job_config = JSON.parse(template.element.form_model.job_config);\n  config.include_job_config_in_spark_config = template.element.form_model.include_job_config_in_spark_config;\n  \n  config.uploaded_files = template.element.form_model.uploaded_files;\n  if (null != config.uploaded_files) {\n    if (null == new_obj.library_names_or_ids) new_obj.library_names_or_ids = [];\n    for (var x in config.uploaded_files) new_obj.library_names_or_ids.push(config.uploaded_files[x]);\n  }\n  config.uploaded_lang_files = template.element.form_model.uploaded_lang_files;\n  if (null != config.uploaded_lang_files) {\n    if (null == new_obj.library_names_or_ids) new_obj.library_names_or_ids = [];\n    for (var x in config.uploaded_lang_files) new_obj.library_names_or_ids.push(config.uploaded_lang_files[x]);\n  }\n  config.external_jars = template.element.form_model.external_jars;\n  config.external_files = template.element.form_model.external_files;\n  config.external_lang_files = template.element.form_model.external_lang_files;\n\n  curr_obj.jobs.push(new_obj);\n  return new_obj;\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var lib_map = {}; var curr_job = curr_obj.jobs[curr_obj.jobs.length-1]; \n  for ( var e in curr_job.config.enrich_pipeline ) { \n    if (curr_job.config.enrich_pipeline[e].module_name_or_id) {\n      lib_map[curr_job.config.enrich_pipeline[e].module_name_or_id] = true;\n    }\n    for ( l in curr_job.config.enrich_pipeline[e].library_names_or_ids ) { \n      lib_map[curr_job.config.enrich_pipeline[e].library_names_or_ids[l]] = true;\n    }\n  } \n  curr_job.library_names_or_ids = [];\n  var libs = (template.element.form_model.library_names_or_ids || []); \n  for (var kk in libs) curr_job.library_names_or_ids.push(libs[kk]); \n  for (var k in lib_map) curr_job.library_names_or_ids.push(k); \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Horizontal Input",
          "element": {
            "enabled": true,
            "short_name": "Unique Job Name",
            "summary": "A Short Name For This Job (Alphanumeric/_ only, no spaces - used for dependencies etc)",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "horizontalInput",
              "key": "_short_name",
              "required": true,
              "pattern": "[a-zA-Z0-9_]+"
            },
            "template": {
              "display_name": "Horizontal Input",
              "form_info": "Compact text input element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "_summary",
                  "type": "horizontalTextArea",
                  "templateOptions": {
                    "label": "Placeholder",
                    "placeholder": "The placeholder text displayed when the input is empty",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "key": "pattern",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Pattern",
                    "placeholder": "Optional validation regular expression",
                    "required": false
                  }
                }
              ],
              "default_model": {
                "type": "horizontalInput",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Multi Text Input",
          "element": {
            "enabled": true,
            "short_name": "JAR libraries",
            "summary": "Add jar files to the scala path from the shared library",
            "row": 2,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "key": "library_names_or_ids"
            },
            "template": {
              "display_name": "Multi Text Input",
              "form_info": "A variable list of text fields",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "_summary",
                  "type": "horizontalTextArea",
                  "templateOptions": {
                    "label": "Placeholder",
                    "placeholder": "The placeholder text displayed when the input is empty",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "pattern",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Pattern",
                    "placeholder": "Optional validation regular expression",
                    "required": false
                  }
                }
              ],
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { type: 'multiInput', templateOptions: { inputOptions: { type: 'input', templateOptions: {} } } };\n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name; \n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.inputOptions.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.inputOptions.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Horizontal Input",
          "element": {
            "enabled": true,
            "short_name": "Dependencies",
            "summary": "A comma-separated list of dependencies (other job names) for this job",
            "row": 0,
            "col": 4,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "horizontalInput",
              "key": "dependencies"
            },
            "template": {
              "display_name": "Horizontal Input",
              "form_info": "Compact text input element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "_summary",
                  "type": "horizontalTextArea",
                  "templateOptions": {
                    "label": "Placeholder",
                    "placeholder": "The placeholder text displayed when the input is empty",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "key": "pattern",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Pattern",
                    "placeholder": "Optional validation regular expression",
                    "required": false
                  }
                }
              ],
              "default_model": {
                "type": "horizontalInput",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Horizontal Line",
          "element": {
            "enabled": true,
            "short_name": "Horizontal Line",
            "summary": "",
            "row": 0,
            "col": 5,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "html": "<hr/>"
            },
            "template": {
              "display_name": "Horizontal Line",
              "form_info": "Insert horizontal line",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Layout"
              ],
              "schema": [],
              "default_model": {
                "html": "<hr/>"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.schema.push({template: template.element.form_model.html}); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Horizontal Line",
          "element": {
            "enabled": true,
            "short_name": "Horizontal Line",
            "summary": "",
            "row": 1,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "html": "<hr/>"
            },
            "template": {
              "display_name": "Horizontal Line",
              "form_info": "Insert horizontal line",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Layout"
              ],
              "schema": [],
              "default_model": {
                "html": "<hr/>"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.schema.push({template: template.element.form_model.html}); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Horizontal Dropdown",
          "element": {
            "enabled": true,
            "short_name": "Analytic Type",
            "summary": "Batch of streaming",
            "row": 0,
            "col": 3,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "horizontalSelect",
              "key": "analytic_type",
              "options": [
                {
                  "name": "Batch",
                  "value": "batch"
                },
                {
                  "name": "Streaming",
                  "value": "stream"
                }
              ],
              "required": true
            },
            "template": {
              "display_name": "Horizontal Dropdown",
              "form_info": "Compact dropdown element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Selection"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "className": "section-label",
                  "template": "<hr /><div><strong>Dropdown Elements:</strong></div>"
                },
                {
                  "templateOptions": {
                    "btnText": "Add",
                    "fields": [
                      {
                        "templateOptions": {
                          "required": true,
                          "label": "Name",
                          "placeholder": "The display name associated with the dropdown value"
                        },
                        "key": "name",
                        "type": "horizontalInput"
                      },
                      {
                        "templateOptions": {
                          "required": true,
                          "pattern": "[a-zA-Z0-9_]+",
                          "label": "Value",
                          "placeholder": "The key for the selected dropdown element"
                        },
                        "key": "value",
                        "type": "horizontalInput"
                      }
                    ]
                  },
                  "type": "repeatSection",
                  "key": "options"
                }
              ],
              "default_model": {
                "type": "horizontalSelect",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.required = (true === template.element.form_model.required);\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.options = template.element.form_model.options;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Code Editor",
          "element": {
            "enabled": true,
            "short_name": "Scala Spark Script",
            "summary": "Scala code that is executed in the Spark context, using the \"_a2\" context object",
            "row": 1,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "code_input",
              "templateOptions": {
                "codemirror": {
                  "lineNumbers": true,
                  "smartIndent": true,
                  "mode": "clike"
                },
                "label": "Scala Spark Script",
                "required": false
              },
              "mode": "clike",
              "required": false,
              "key": "script"
            },
            "template": {
              "display_name": "Code Editor",
              "form_info": "Write code in various languages (or JSON/XML/HTML)",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "templateOptions": {
                    "required": true,
                    "label": "Language",
                    "options": [
                      {
                        "value": "clike",
                        "name": "Scala"
                      },
                      {
                        "value": "javascript",
                        "name": "Javascript/JSON"
                      },
                      {
                        "value": "r",
                        "name": "R"
                      },
                      {
                        "value": "python",
                        "name": "Python"
                      },
                      {
                        "value": "xml",
                        "name": "XML"
                      },
                      {
                        "value": "lua",
                        "name": "Lua"
                      },
                      {
                        "value": "yaml",
                        "name": "YAML"
                      },
                      {
                        "value": "properties",
                        "name": "Properties"
                      },
                      {
                        "value": "htmlembedded",
                        "name": "HTML (embedded)"
                      },
                      {
                        "value": "htmlmixed",
                        "name": "HTML (mixed)"
                      }
                    ]
                  },
                  "type": "horizontalSelect",
                  "key": "mode"
                }
              ],
              "default_model": {
                "type": "code_input",
                "templateOptions": {
                  "codemirror": {
                    "lineNumbers": true,
                    "smartIndent": true
                  }
                }
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { \n    key: template.element.form_model.key,\n    type: template.element.form_model.type,\n    templateOptions: template.element.form_model.templateOptions \n  };\n  obj.templateOptions.codemirror.mode = template.element.form_model.mode;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.required = template.element.form_model.required;\n  curr_obj.schema.push(obj);\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    }
  ]
}