# =============================================================================
# Tutorial INI configuration
#
# Usernames/passwords are based on the classic Mel Brooks' film "Spaceballs" :)
# =============================================================================

# -----------------------------------------------------------------------------
# Users and their (optional) assigned roles
# username = password, role1, role2, ..., roleN
# -----------------------------------------------------------------------------
[users]
root = secret, admin
guest = guest, readRole
testUser = testUser, readRole, writeRole

# -----------------------------------------------------------------------------
# Roles with assigned permissions
# roleName = perm1, perm2, ..., permN
# -----------------------------------------------------------------------------
[roles]
admin = *
guest = read:*
readRole = read:*
writeRole = write:*

[main]
# Any realms here will automatically be added to the default created securityManager.  No need to define
# a securityManager here unless you want to override the default. If you want to override the default, you would
# do it by uncommenting this line and specifying the fully qualified class name of your SecurityManager implementation:
# securityManager = my.domain.package.MySecurityManager

# Let's use some in-memory caching to reduce the number of runtime lookups against Stormpath.
# A real application might want to use a more robust caching solution (e.g. ehcache or a
# distributed cache).  When using such caches, be aware of your cache TTL settings: too high
# a TTL and the cache won't reflect any potential changes in Stormpath fast enough.  Too low
# and the cache could evict too often, reducing performance.
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $cacheManager

# define the realm(s) we want to use for our application.  If you have more than one realm, the order in which they
# are defined is the order in which they will be consulted during the authentication process.
# This simple example uses only a single realm, but you could add more for more complicated requirements.

# We'll use credentials hashing, since that keeps the users' credentials (passwords, private keys, etc) safe:
#myRealmCredentialsMatcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher

# now define the realm, and specify that it use the above credentials matcher:
#myRealm = MyRealm
#myRealm.credentialsMatcher = $myRealmCredentialsMatcher

#prevent session storage
#securityManager.subjectDAO.sessionStorageEvaluator.sessionStorageEnabled = false
#securityManager.sessionManager.globalSessionTimeout = 2000

